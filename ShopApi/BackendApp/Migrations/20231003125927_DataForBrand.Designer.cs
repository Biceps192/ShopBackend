// <auto-generated />
using System;
using BackendApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendApp.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20231003125927_DataForBrand")]
    partial class DataForBrand
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendApp.Models.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PublicUserId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PublicUserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("BackendApp.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5672), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5674), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5676), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5678), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "LG"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5680), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5682), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Canon"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5684), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5685), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Nikon"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5687), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5689), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Google"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5691), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5692), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5694), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5696), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Nvidia"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5698), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5699), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5701), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5703), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "GIGABYTE"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5705), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5706), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "BenQ"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5708), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5710), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5713), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5715), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Fujifilm"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5717), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5718), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Philips"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5720), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5722), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Panasonic"
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameOfCategory")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5375), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5428), new TimeSpan(0, 3, 0, 0, 0)),
                            NameOfCategory = "Laptops, Tablets & PCs"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5432), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5434), new TimeSpan(0, 3, 0, 0, 0)),
                            NameOfCategory = "Computer & Office"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5436), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5437), new TimeSpan(0, 3, 0, 0, 0)),
                            NameOfCategory = "Hardware & Components"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5439), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5441), new TimeSpan(0, 3, 0, 0, 0)),
                            NameOfCategory = "Smartphones, Radio & GPS"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5482), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5484), new TimeSpan(0, 3, 0, 0, 0)),
                            NameOfCategory = "Photo / Video"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5487), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5488), new TimeSpan(0, 3, 0, 0, 0)),
                            NameOfCategory = "TV / HiFi / Video"
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("BackendApp.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublicUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublicUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BackendApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BackendApp.Models.ProductOrder", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("BackendApp.Models.PublicUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("PublicUsers");
                });

            modelBuilder.Entity("BackendApp.Models.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5606), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5610), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Laptops / Notebooks"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5614), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5615), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Apple MacBook"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5618), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5619), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Monitors"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5621), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5623), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "All-in-One Printers"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5625), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5627), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Processors (CPUs)"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5629), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5630), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "AMD Graphics cards"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5632), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5634), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Smartphones & Cell Phones"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5636), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5637), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Apple iPhones"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5639), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5641), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Digital Cameras"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5643), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5644), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Instant Cameras"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5647), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5648), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "LED TV / LCD TV"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5650), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 10, 3, 15, 59, 27, 276, DateTimeKind.Unspecified).AddTicks(5652), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "OLED TV"
                        });
                });

            modelBuilder.Entity("BackendApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PubclicUserId")
                        .HasColumnType("int");

                    b.Property<int>("PublicUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublicUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendApp.Models.Basket", b =>
                {
                    b.HasOne("BackendApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApp.Models.PublicUser", "PublicUser")
                        .WithMany()
                        .HasForeignKey("PublicUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PublicUser");
                });

            modelBuilder.Entity("BackendApp.Models.Favourite", b =>
                {
                    b.HasOne("BackendApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApp.Models.Order", b =>
                {
                    b.HasOne("BackendApp.Models.PublicUser", "PublicUser")
                        .WithMany()
                        .HasForeignKey("PublicUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicUser");
                });

            modelBuilder.Entity("BackendApp.Models.Product", b =>
                {
                    b.HasOne("BackendApp.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApp.Models.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("BackendApp.Models.ProductOrder", b =>
                {
                    b.HasOne("BackendApp.Models.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApp.Models.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BackendApp.Models.Subcategory", b =>
                {
                    b.HasOne("BackendApp.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BackendApp.Models.User", b =>
                {
                    b.HasOne("BackendApp.Models.PublicUser", "PublicUser")
                        .WithMany()
                        .HasForeignKey("PublicUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicUser");
                });

            modelBuilder.Entity("BackendApp.Models.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("BackendApp.Models.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
