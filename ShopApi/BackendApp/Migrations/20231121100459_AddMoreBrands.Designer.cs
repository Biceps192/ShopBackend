// <auto-generated />
using System;
using BackendApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendApp.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20231121100459_AddMoreBrands")]
    partial class AddMoreBrands
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendApp.Models.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublicUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublicUserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("BackendApp.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2558), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2560), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2563), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2565), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "LG"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2567), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2568), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Canon"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2570), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2572), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Nikon"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2574), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2575), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Google"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2577), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2579), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2580), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2582), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Nvidia"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2584), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2585), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2587), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2589), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "GIGABYTE"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2591), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2592), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "BenQ"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2594), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2596), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2597), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2599), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Fujifilm"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2601), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2602), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Philips"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2604), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2606), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Lenovo"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2608), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2609), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Logitech"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2611), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2613), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Kingston"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2615), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2616), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Energizer"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2618), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2619), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Razer"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2621), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2623), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "be quiet!"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2625), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2626), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Xiaomi"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2628), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2630), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Razer"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2631), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2633), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Optoma"
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameOfCategory")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2304), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2362), new TimeSpan(0, 2, 0, 0, 0)),
                            NameOfCategory = "Laptops, Tablets & PCs"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2365), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2367), new TimeSpan(0, 2, 0, 0, 0)),
                            NameOfCategory = "Computer & Office"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2369), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2371), new TimeSpan(0, 2, 0, 0, 0)),
                            NameOfCategory = "Hardware & Components"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2373), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2374), new TimeSpan(0, 2, 0, 0, 0)),
                            NameOfCategory = "Smartphones, Radio & GPS"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2376), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2378), new TimeSpan(0, 2, 0, 0, 0)),
                            NameOfCategory = "Photo / Video"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2379), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2381), new TimeSpan(0, 2, 0, 0, 0)),
                            NameOfCategory = "TV / HiFi / Video"
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("BackendApp.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BackendApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BackendApp.Models.ProductBasket", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "BasketId");

                    b.HasIndex("BasketId");

                    b.ToTable("ProductBasket");
                });

            modelBuilder.Entity("BackendApp.Models.PublicUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("PublicUsers");
                });

            modelBuilder.Entity("BackendApp.Models.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2496), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2499), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Laptops / Notebooks"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2503), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2504), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Apple MacBook"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2506), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2508), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Monitors"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2510), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2512), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "All-in-One Printers"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2514), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2515), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Processors (CPUs)"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2517), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2519), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "AMD Graphics cards"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2521), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2522), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Smartphones & Cell Phones"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2524), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2526), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Apple iPhones"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2528), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2529), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Digital Cameras"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2531), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2533), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "Instant Cameras"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2535), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2536), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "LED TV / LCD TV"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2538), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = 0,
                            ModifiedAt = new DateTimeOffset(new DateTime(2023, 11, 21, 12, 4, 58, 986, DateTimeKind.Unspecified).AddTicks(2540), new TimeSpan(0, 2, 0, 0, 0)),
                            Name = "OLED TV"
                        });
                });

            modelBuilder.Entity("BackendApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PublicUserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublicUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendApp.Models.Basket", b =>
                {
                    b.HasOne("BackendApp.Models.PublicUser", "PublicUser")
                        .WithMany()
                        .HasForeignKey("PublicUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicUser");
                });

            modelBuilder.Entity("BackendApp.Models.Favourite", b =>
                {
                    b.HasOne("BackendApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApp.Models.Order", b =>
                {
                    b.HasOne("BackendApp.Models.Basket", "Basket")
                        .WithMany()
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");
                });

            modelBuilder.Entity("BackendApp.Models.Product", b =>
                {
                    b.HasOne("BackendApp.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApp.Models.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("BackendApp.Models.ProductBasket", b =>
                {
                    b.HasOne("BackendApp.Models.Basket", "Basket")
                        .WithMany("ProductBasket")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendApp.Models.Product", "Product")
                        .WithMany("ProductBasket")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BackendApp.Models.Subcategory", b =>
                {
                    b.HasOne("BackendApp.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BackendApp.Models.User", b =>
                {
                    b.HasOne("BackendApp.Models.PublicUser", "PublicUser")
                        .WithMany()
                        .HasForeignKey("PublicUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicUser");
                });

            modelBuilder.Entity("BackendApp.Models.Basket", b =>
                {
                    b.Navigation("ProductBasket");
                });

            modelBuilder.Entity("BackendApp.Models.Product", b =>
                {
                    b.Navigation("ProductBasket");
                });
#pragma warning restore 612, 618
        }
    }
}
